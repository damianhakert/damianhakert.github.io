---
layout: markdown_page
title: "GitLab Direction"
---

- TOC
{:toc}

This page describes the direction and roadmap for GitLab. It's organized from
the short to the long term.

## Your contributions

GitLab's direction is determined by GitLab the company, and the code that is
sent by our [contributors](http://contributors.gitlab.com/). We continually
merge code to be released in the next version. Contributing is the best way to
get a feature you want included.

On [our issue tracker for CE][ce-issues] and [EE][ee-issues], many requests are
made for features and changes to GitLab. Issues with the [Accepting Merge
Requests] label are pre-approved as something we're willing to add to GitLab. Of
course, before any code is merged it still has to meet our [contribution
acceptance criteria].

[ce-issues]: https://gitlab.com/gitlab-org/gitlab-ce/issues
[ee-issues]: https://gitlab.com/gitlab-org/gitlab-ee/issues
[Accepting Merge Requests]: https://gitlab.com/gitlab-org/gitlab-ce/issues?state=opened&label_name=Accepting+Merge+Requests
[contribution acceptance criteria]: https://gitlab.com/gitlab-org/gitlab-ce/blob/master/CONTRIBUTING.md#contribution-acceptance-criteria

## What our customers want

As a company, GitLab tries to make things that are useful for our customers as
well as ourselves. After all, GitLab is one of the biggest users of GitLab. If a
customer requests a feature, it carries extra weight. Due to our short release
cycle, we can ship simple feature requests, such as an API extension, within one
or two months.

## Previous releases

On our [release list page](/release-list/) you can find an overview of the most
important features of recent releases and links to the blog posts for each
release.

## Future releases

GitLab releases a new version [every single month on the 22nd]. Note that we
often move things around, do things that are not listed, and cancel things that
_are_ listed.

This page is always in draft, meaning some of the things here might not ever be
in GitLab. New premium features are indicated with "New premium feature" in the
issue title. This is our best estimate of what will be new premium features, but
is in no way definitive.

The list is an outline of **tentpole features** -- the most important features
of upcoming releases -- and doesn't include any contributions from volunteers
outside the company. This is not an authoritative list of upcoming releases - it
only reflects current [milestones](https://gitlab.com/groups/gitlab-org/milestones).

<%= direction %>

[every single month on the 22nd]: /2015/12/07/why-we-shift-objectives-and-not-release-dates-at-gitlab

## Wishlist <a name="wishlist"></a>

Below are features we'd really like to see in GitLab.
This list is not prioritized. We invite everyone to join the discussion by clicking the wishlist item that is of interest to you.
Feel free to comment, vote up or down any issue or just follow the conversation.  For GitLab sales, please add a link to the account in Salesforce.com that has expressed interest in a wishlist feature.
We very much welcome contributions that implement any of these things.

### CI

<%= wishlist["CI"] %>

### CD

<%= wishlist["deploy"] %>

### Code Review

[Code review meta issue](https://gitlab.com/gitlab-org/gitlab-ce/issues/19049)

<%= wishlist["code review"] %>

### Container Registry

<%= wishlist["container registry"] %>

### Issue Boards

[Issue Boards meta issue](https://gitlab.com/gitlab-org/gitlab-ce/issues/21365)

<%= wishlist["issue boards"] %>

### Issue tracker

<%= wishlist["issues"] %>

### Moderation Tools

[Moderation tools meta issue ](https://gitlab.com/gitlab-org/gitlab-ce/issues/19313)

<%= wishlist["moderation"] %>

### Open Source Projects

[Features for open source projects](https://gitlab.com/gitlab-org/gitlab-ce/issues/8938)

<%= wishlist["open source"] %>

### Pages

<%= wishlist["pages"] %>

### Performance

<%= wishlist["Performance"] %>

### Prometheus Monitoring

<%= wishlist["prometheus"] %>

### Usability

<%= wishlist["usability"] %>

### User management

[User management meta issue](https://gitlab.com/gitlab-org/gitlab-ce/issues/19860)

<%= wishlist["user management"] %>

### Version Control for Everything

<%= wishlist["vcs for everything"] %>

### Wiki

[Wiki improvements meta issue](https://gitlab.com/gitlab-org/gitlab-ce/issues/19276)

<%= wishlist["wiki"] %>

### Moonshots

- [.git namespace with onename](https://gitlab.com/gitlab-org/gitlab-ce/issues/4232)
<%= wishlist["moonshots"] %>

### Premium Features

<%= wishlist["ee premium"] %>

## Scope <a name="scope"></a>

[Our vision](#vision) is an integrated set of tools for the software development lifecycle based on convention over configuration.
To achieve this we ship the following features in our Omnibus package:

1. **Idea** (Chat) => [Mattermost](http://www.mattermost.org/)
1. **Issue** (Tracker) => Issue Tracker
1. **Plan** (Board) => [Issue Boards](https://about.gitlab.com/solutions/issueboard/)
1. **Code** (IDE) => [Web editor](https://docs.gitlab.com/ce/user/project/repository/web_editor.html) and [web terminal](https://docs.gitlab.com/ce/ci/environments.html#web-terminals)
1. **Commit** (Repo) => GitLab Repositories
1. **Test** (CI) => [GitLab Continuous Integration](https://about.gitlab.com/gitlab-ci/) and [Container Registry](https://about.gitlab.com/2016/05/23/gitlab-container-registry/)
1. **Review** (MR) => GitLab Merge Requests and [Review Apps](https://about.gitlab.com/features/review-apps/)
1. **Staging** (CD) => [GitLab Deploy](https://docs.gitlab.com/ce/ci/environments.html) and [auto deploy](https://docs.gitlab.com/ce/ci/autodeploy/index.html)
1. **Production** (Chatops) => [Mattermost slash commands](https://docs.gitlab.com/ee/project_services/mattermost_slash_commands.html) and [Slack slash commands](https://docs.gitlab.com/ce/project_services/slack_slash_commands.html)
1. **Feedback** (Monitoring) => [Cycle Analytics](https://about.gitlab.com/solutions/cycle-analytics/) and [Prometheus](https://about.gitlab.com/2017/01/05/prometheus-and-gitlab/).

Also see our [demo](https://about.gitlab.com/handbook/sales/demo/) and our [vision for CI and CD](https://about.gitlab.com/direction/cicd/).

### Outside our scope

1. **Operating System** Ubuntu, CentOS, [RHEL](https://www.redhat.com/en/technologies/linux-platforms/enterprise-linux), [CoreOS](https://coreos.com/), [Alpine Linux](https://alpinelinux.org/about/)
1. **Container Scheduler** although we do want to use [GitLab Deploy](https://gitlab.com/gitlab-org/gitlab-ce/issues/3286) to deploy to CloudFoundry, OpenStack, OpenShift, Kubernetes, Mesos DCOS, Docker Swarm, Atlas/Terraform, [Nomad](https://nomadproject.io/), [Deis](http://deis.io/), [Convox](http://www.convox.com/), [Flynn](https://flynn.io/), [Tutum](https://www.tutum.co/), [GiantSwarm](https://giantswarm.io/), [Rancher](https://github.com/rancher/rancher/blob/master/README.md)
1. **Configuration management** although we do want to upload cookbooks, manifests, playbooks, and modules for respectively Chef, Puppet, Ansible, and Salt.
1. **Container configuration agents** [ContainerPilot](http://container-solutions.com/containerpilot-on-mantl/), [Orchestrator-agent](https://www.percona.com/blog/2016/04/13/orchestrator-agent-how-to-recover-a-mysql-database/)
1. **Distributed configuration stores** Consul, Etcd, Zookeeper, Vault
1. **Logging** [Fluentd](http://www.fluentd.org/architecture), ELK stack, Graylog, Splunk, [LogDNA](https://logdna.com/)
1. **Error monitoring** Sentry, Airbrake, Bugsnag
1. **Network** [Flannel](https://github.com/coreos/flannel/), Openflow, VMware NSX, Cisco ACI
1. **Tracing** OpenTracing, [LightStep](http://lightstep.com/)
1. **Network security** Nmap, rkhunter, Metasploit, Snort, OpenVAS, OSSEC

## Vision <a name="vision"></a>

See below for a TL;DR on how and what we're building at GitLab.
[See this page for an in-depth in our product strategy](/direction/strategy).

---

From development teams to marketing organizations, everyone needs to collaborate on
digital content. Content should be open to suggestions by a wide number of
potential contributors. Open contribution can be achieved by using a mergeable
file format and distributed version control. The vision of GitLab is to **allow
everyone to collaborate on all digital content** so people can cooperate
effectively and achieve better results, faster.

Ideas flow though many stages before they are realized. An idea originates in a chat discussion, an issue is created, it is planned in a sprint, coded in an IDE, committed to
version control, tested by CI, code reviewed, deployed, checked and documented. Stitching all these stages of the software developement lifecycle together can be done in many different ways. You can have a marketplace of
proprietary apps from different suppliers or use a suite of products developed
in isolation. We believe that an **integrated set of tools for the software development lifecycle based on convention over configuration** offers a superior user experience. The
advantage can be quoted from the [Wikipedia page for convention over
configuration](https://en.wikipedia.org/wiki/Convention_over_configuration):
"decrease the number of decisions that developers need to make, gaining
simplicity, and not necessarily losing flexibility". In GitLab you only have to
specify unconventional aspects of your workflow.
The happy path is **frictionless from idea to production**.

We admire other convention over configuration tools like [Ruby on
Rails](http://rubyonrails.org/) (that doctrine of which perfectly describe the [value of integrated systems](http://rubyonrails.org/doctrine#integrated-systems)), [Ember](http://emberjs.com/), and
[Heroku](https://www.heroku.com/), and strive to offer the same advantages for a
continuous delivery of software.

We prefer to offer an integrated set of tools instead of a network of services or offering plugins for the following reasons:

1. We think an integrated set of tools provides a better user experience than a modular approach, as detailed by [this article from Stratechery](https://stratechery.com/2013/clayton-christensen-got-wrong/).
1. The open source nature of GitLab ensures that that we can combine great open source products.
1. Everyone can contribute to create a feature set that is [more complete than other tools](https://about.gitlab.com/comparison/). We'll focus on making all the parts work well together to create a better user experience.
1. Because GitLab is open source the enhancements can become [part of
the codebase instead](http://doc.gitlab.com/ce/project_services/project_services.html) of being external. This ensures the automated tests for all
functionality are continually run, ensuring that additions keep working work. This is contrast to externally maintained plugins that might not be updated.
1. Having the enhancements as part of the codebase also
ensures GitLab can continue to evolve with its additions instead of being bound
to an API that is hard to change and that resists refactoring. Refactoring is essential to maintaining a codebase that is easy to contribute to.
1. Many people use GitLab on-premises, for such situations it is much easier to install one tool than installing and integrating many tools.
1. GitLab is used by many large organizations with complex purchasing processes, having to buy only one subscription simplifies their purchasing.

## 2017 Strategy

Some key achievements for Q1, Q2 for 2017.

### 1. Cloud Native and Container Schedulers
1. (DONE) Q1: Make it work on Google Cloud
1. Q1: Support app + database deployments
1. Q2: Support large scale projects

### 2. Monitoring and Feedback
1. (DONE) Q1: Ship prometheus with GitLab
1. Q1: Monitoring of Customer Auto Deployed Apps on Kubernetes.
1. Q2: Support for non-Auto Deployed (Manually?) Apps on Kubernetes

### 3. Made for enterprise
1. Q1: Ship nested groups
1. Q1: License Finder
1. Q2: Support Android repositories
1. Q2: Cross-project pipelines
1. Q2: Group level issues support (boards)
1. Q2: Reporting
1. Q3: Geo Disaster Recovery (GA)

### 4. Easy building, deploying, and monitoring
1. Q1: Successfully introduce easier, more powerful filtering
1. Q1: Make auto deploy easier to discover and use
1. Q2: Deploy boards
1. Q2: Modernize the navigation

### 5. GitLab.com as powerful SaaS
1. Q1: Introduce plans and in-UI subscriptions
1. Q2: Tier-exclusive features

## General Product Strategy

Today you can create an entire product successfully in GitLab, from idea to production. But you still need domain-specific knowledge to be able to set this up and then maintain, monitor and scale this application.

GitLab provides an [_integrated toolset_](#integrated-toolset) for [_teams of any size_](#teams-of-any-size) with [_any kind of projects_](#any-project) to move faster from idea to production, while giving you [_actionable feedback_](#actionable-feedback), and making shipping products _simple_.

GitLab's toolset is opinionated, but still allows you to use other tools if you
like to do so. GitLab plays well with others.

### Integrated Toolset

GitLab is an integrated set of tools for conversational development. This offers a superior user experience and lowers the threshold between each step in going from idea to production.

#### Conversational Development

Conversational development carries a conversation across functional groups through the software development lifecycle, involving gatekeepers at every step. By providing relevant context, a feature that is only possible with an integrated solution like GitLab, we can reduce cycle time, making it easier to diagnose problems and make decisions.

Concretely, conversational development in GitLab means that a change can be easily followed from inception to the changes it made in performance and business metrics and feeding this information back to _all_ stakeholders _immediately_.

Effectively, this allows cross-functional teams to collaborate effectively.

#### Idea to Production

GitLab contains all tools needed to bring any project from the ideation stage
up to running in production and giving feedback. This includes repositories,
issue tracking, CI, CD, monitoring, chat and more. GitLab focuses on lowering the threshold between each step, so that working on a project means focusing
on collaboration and not on learning new tools.

#### External Integrations

GitLab plays well with others. To allow everyone to contribute, it's important
that there is only one place where you'll have to look, even if you need to
use external tools that are not part of GitLab. For this reason, GitLab plays
well with others: Providing APIs for nearly everything you can do within GitLab
and powerful, simple authentication and authorization tools for external
integrations.

GitLab ships with built-in integrations to many popular applications.

### Any Project

GitLab is the tool for anyone working on software in any form.

#### Multi-repository projects

Software projects are often more than single repositories. GitLab will evolve from being focused around single repositories towards being able to accommodate software projects that consist of multiple repositories.

- [Nested Groups](https://gitlab.com/gitlab-org/gitlab-ce/issues/2772)

#### From scratch or legacy

Starting a project from scratch makes it easy to do everything through GitLab and well integrated. But existing / migrated / legacy projects should benefit from the same features that GitLab offers. GitLab will offer the tools to help you integrate, setup and improve your projects with the tools we have at offer. A concrete example is setting up review apps: everyone would benefit from this. GitLab will give you all the handles to set this up. It should not be required to dive deep in the documentation to discover features like this.

- [Auto Deploy](https://gitlab.com/gitlab-org/gitlab-ce/issues/23580)

#### Beyond code

Going from idea to production is not a matter of just code anymore. Modern products work with elaborate mockups and designs both in ideation, but also in production. Whether you’re working on assets in a game or working on the design of a new website, GitLab will allow you to collaborate on your work as a programmer would on their code.

- [Comment on images](https://gitlab.com/gitlab-org/gitlab-ce/issues/2641)

### Actionable Feedback

Deployments should never be fire and forget. GitLab will give you immediate feedback on every deployment on any scale. This means that GitLab can tell you whether performance has improved on the application level, but also whether business metrics have changed.

Concretely, we can split up monitoring and feedback efforts within GitLab in three distinct areas: execution (cycle analytics), business and system feedback.

#### Business feedback

With the power of monitoring and an integrated approach, we have the ability to do amazing things within GitLab. GitLab will be able to automatically test commits and versions through feature flags and A/B testing.

Business feedback exists on different levels:

* Short term: how does a certain change perform? Choose A/B based on data.
* Medium term: did a particular new feature change conversions, engagement
* Long term: how do larger efforts relate to changes in conversations, engagement, revenue

- [A/B Testing of branches](https://gitlab.com/gitlab-org/gitlab-ee/issues/117)

#### System feedback

We can now go beyond CI and CD. GitLab will able to tell you whether a change
improved performance or stability. Because it will have access to both
historical data on performance and code, it can show you the impact of any
particular change at any time.

System feedback happens over different time windows:

* Immediate: see whether changes influence availability and alert if they do
* Short-medium term: see whether changes influence system metrics and performance
* Medium-Long term: did a particular effort influence system status

- Implemented: [Performance Monitoring](https://docs.gitlab.com/ee/administration/monitoring/performance/introduction.html)
- [Status monitoring and feedback](https://gitlab.com/gitlab-org/gitlab-ce/issues/25555)
- [Feature monitoring](https://gitlab.com/gitlab-org/gitlab-ce/issues/24254)

#### Execution Feedback & Cycle Analytics

GitLab is able to speed up cycle time for any project.
To provide feedback on cycle time GitLab will continue to expand cycle
analytics so that it not only shows you what is slow, it’ll help you speed up
with concrete, clickable suggestions.

- [Cycle Speed Suggestions](https://gitlab.com/gitlab-org/gitlab-ce/issues/25281)

### Teams of any Size

GitLab is built to work for teams of any size. By yourself, it gets out of
your way and lets you quickly push you work and track your progress.

With a small team, you can easily communicate and quickly move through the
otherwise time-intensive steps of bringing a creation to production, with
infrastructure as code, a flexible issue tracker and very permissive defaults.

Large teams of thousands of collaborators working on complex projects can easily
manage permissions. Automatic and batch actions for getting rolling quickly,
up to fine-grained overrides to give certain users specific actions, temporary
if needed.

Teams working with external collaborators will find it easy and safe to allow
collaborators to work together with them in the same place as the rest of their
work, while securing what is not to be shared.

Open source initiatives can use GitLab to effectively collaborate with a
community, while having the moderation tools to keep the project clean and
focused.

### Vision for the Enterprise Editions

![](ee-versions.png)

GitLab comes in 4 editions:

* **Community Edition**: aimed at solo developers as well as a small team of
developers. All the Enterprise Editions are based on CE. Our objective is that
our Idea to production vision is achievable with our free version.
* **Enterprise Edition Starter**: aimed towards teams of developers (100 or more
users). It includes enterprise features that you are more likely to find in
large organizations. It also includes features for managers of these teams, like
reporting, or group management functionalities.
* **Enterprise Edition Premium**: aimed towards large organizations (750+ users)
or geographically distributed teams. This edition contains features for
instance administrators, managers of very large teams that want to take actions
across different teams, and people other than developers who actively
participate in the life of a software, like QA testers or support agents. It
also contains features that help teams that are not in the same physical
locations.
* **Enterprise Edition Ultimate**: aimed towards very large organizations (5000+
users). This edition bundles tools that help to work without any interruption,
or be in complete control over the change management within their organization.
Finally, this edition is for corporations with various compliances and
certifications.
